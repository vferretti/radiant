-- Value Sets ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "organization_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "practitioner_roles" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "sexes" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "observation_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "genome_analysis_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "family_analysis_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "life_stage_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "case_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "request_statuses" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "request_priorities" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "event_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "experimental_strategies" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "technology_platforms" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "family_relationships" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "obs_interpretations" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "sample_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "sample_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "histology_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "affected_statuses" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "age_units" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "data_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "observations" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT,
    "category" TEXT NOT NULL REFERENCES "observation_categories"("code") 
);

CREATE TABLE IF NOT EXISTS "onsets" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "data_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

CREATE TABLE IF NOT EXISTS "file_formats" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT
);

--  Catalogs ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "analysis_catalog" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT,
    "genome" TEXT REFERENCES "genome_analysis_types"("code"),
    "family" TEXT REFERENCES "family_analysis_types"("code"),
    "life_stage" TEXT REFERENCES "life_stage_types"("code"),
    "description" TEXT,
    "panel_id" INTEGER,
    "reflex_panel_id" INTEGER
);


CREATE TABLE IF NOT EXISTS "service_catalog" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "alias" TEXT UNIQUE,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT,
    "experimental_strategy" TEXT REFERENCES "experimental_strategies"("code"),
    "platform" TEXT REFERENCES "technology_platforms"("code"),
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "task_catalog" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name_en" TEXT NOT NULL,
    "name_fr" TEXT,
    "description" TEXT
);

-- Actors ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "organization" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name" TEXT NOT NULL,
    "category" TEXT NOT NULL REFERENCES "organization_categories"("code")
);

CREATE TABLE IF NOT EXISTS "practitioner" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_name" TEXT NOT NULL,
    "first_name" TEXT NOT NULL,
    "license" TEXT,
    "prefix" TEXT,
    "suffix" TEXT
);

CREATE INDEX IF NOT EXISTS idx_practitioner_name ON "practitioner" ("last_name", "first_name");

CREATE TABLE IF NOT EXISTS "practitioner_has_roles" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "practitioner_id" INTEGER REFERENCES "practitioner"("id"),
    "organization_id" INTEGER REFERENCES "organization"("id"),
    "role" TEXT NOT NULL REFERENCES "practitioner_roles"("code"),
    "email" TEXT,
    "phone" TEXT,
    CONSTRAINT unique_role_in_organization UNIQUE (
        "practitioner_id",
        "organization_id",
        "role"
    )
);


CREATE INDEX IF NOT EXISTS idx_practitioner_has_role_organization_id ON "practitioner_has_roles" ("organization_id");

-- Patients ---------------------------------------------------------------

CREATE TABLE IF NOT EXISTS "person" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_name" TEXT NOT NULL,
    "first_name" TEXT NOT NULL,
    "sex" TEXT NOT NULL REFERENCES "sexes"("code"),
    "dob" DATE,
    "jhn" TEXT UNIQUE
);


CREATE INDEX IF NOT EXISTS idx_person_name ON "person" ("last_name", "first_name");

CREATE TABLE IF NOT EXISTS "patient" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" TEXT,
    "person_id" INTEGER REFERENCES "person" ("id"),
    "sex" TEXT NOT NULL REFERENCES "sexes"("code"),
    "mrn" TEXT,
    "managing_organization_id" INTEGER REFERENCES "organization" ("id"),
    "note" TEXT,
    CONSTRAINT unique_mrn_org UNIQUE (
        "mrn",
        "managing_organization_id"
    )
);

CREATE TABLE IF NOT EXISTS "study" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name" TEXT NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "study_has_patients" (
    "study_id" INTEGER REFERENCES "study" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    PRIMARY KEY ("study_id", "patient_id")
);

CREATE TABLE IF NOT EXISTS "event" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "patient_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "type" TEXT NOT NULL REFERENCES "event_types"("code"),
    "age_at_event" NUMERIC(6, 1),
    "age_at_event_unit" TEXT REFERENCES "age_units"("code"),
    "start_date" DATE,
    "end_date" DATE
);


-- Cases ---------------------------------------------------------------

CREATE TABLE IF NOT EXISTS "project" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name" TEXT NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "case" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "analysis_catalog_id" INTEGER REFERENCES "analysis_catalog"("id") NOT NULL,
    "proband_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "project_id" INTEGER REFERENCES "project"("id") NOT NULL,
    "event_id" INTEGER REFERENCES "event"("id"),
    "type" TEXT NOT NULL REFERENCES "case_types"("code"),
    "status" TEXT NOT NULL REFERENCES "request_statuses"("code"),
    "priority" TEXT NOT NULL REFERENCES "request_priorities"("code"),
    "priority_score" SMALLINT NOT NUll,
    "life_stage" TEXT NOT NULL REFERENCES "life_stage_types"("code"),
    "requester_id" INTEGER REFERENCES "practitioner_has_roles"("id"),
    "performer_org_id" INTEGER REFERENCES "organization"("id"),
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL,
    "reflex_panel" BOOLEAN,
    "diagnosis_hypothesis" TEXT,
    "note" TEXT
);


CREATE INDEX IF NOT EXISTS idx_case_analysis_catalog_id ON "case" ("analysis_catalog_id");

CREATE INDEX IF NOT EXISTS idx_case_project_id ON "case" ("project_id");

CREATE INDEX IF NOT EXISTS idx_case_proband_id ON "case" ("proband_id");

CREATE INDEX IF NOT EXISTS idx_case_event_id ON "case" ("event_id");

CREATE INDEX IF NOT EXISTS idx_case_requester_id ON "case" ("requester_id");

CREATE INDEX IF NOT EXISTS idx_case_performer_org_id ON "case" ("performer_org_id");

CREATE INDEX IF NOT EXISTS idx_case_priority_score ON "case" ("priority_score");

CREATE TABLE IF NOT EXISTS "family" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" TEXT,
    "case_id" INTEGER REFERENCES "case"("id") NOT NULL,
    "family_member_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "relationship_to_proband" TEXT NOT NULL REFERENCES "family_relationships"("code"),
    "affected_status" TEXT NOT NULL REFERENCES "affected_statuses" ("code")
);

CREATE INDEX IF NOT EXISTS idx_family_case_id ON "family" ("case_id");

CREATE TABLE IF NOT EXISTS "service_request" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "service_catalog_id" INTEGER REFERENCES "service_catalog"("id") NOT NULL,
    "case_id" INTEGER REFERENCES "case"("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "status" TEXT NOT NULL REFERENCES "request_statuses"("code"),
    "priority" TEXT NOT NULL REFERENCES "request_priorities"("code"),
    "requester_id" INTEGER REFERENCES "practitioner_has_roles"("id"),
    "performer_org_id" INTEGER REFERENCES "organization"("id"),
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL,
    "note" TEXT
);

CREATE INDEX IF NOT EXISTS idx_service_service_id ON "service_request" ("service_catalog_id");

CREATE INDEX IF NOT EXISTS idx_service_case_id ON "service_request" ("case_id");

CREATE INDEX IF NOT EXISTS idx_service_patient_id ON "service_request" ("patient_id");

CREATE INDEX IF NOT EXISTS idx_service_requester_id ON "service_request" ("requester_id");

CREATE INDEX IF NOT EXISTS idx_service_performer_org_id ON "service_request" ("performer_org_id");

--Observations ---------------------------------------------------------------

CREATE TABLE IF NOT EXISTS "observation_coding" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "case"("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "observation_code" TEXT REFERENCES "observations"("code") NOT NULL,
    "coding_system" TEXT NOT NULL,
    "code_value" TEXT NOT NULL,
    "onset_code" TEXT REFERENCES "onsets"("code") NOT NULL,
    "interpretation" TEXT REFERENCES "obs_interpretations"("code"),
    "note" TEXT
);

CREATE INDEX IF NOT EXISTS idx_observation_case_id ON "observation_coding" ("case_id");

CREATE INDEX IF NOT EXISTS idx_observation_patient_id ON "observation_coding" ("patient_id");

-- samples & sequencing ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "sample" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" TEXT,
    "category" TEXT NOT NULL REFERENCES "sample_categories"("code"),
    "type" TEXT NOT NULL REFERENCES "sample_types"("code"),
    "patient_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "parent_specimen_id" INTEGER REFERENCES "sample"("id"),
    "tissue_site" TEXT,
    "histology" TEXT REFERENCES "histology_types"("code")
);


CREATE INDEX IF NOT EXISTS idx_sample_parent_id ON "sample" ("parent_specimen_id");

CREATE INDEX IF NOT EXISTS idx_sample_patient_id ON "sample" ("patient_id");

CREATE TABLE IF NOT EXISTS "sequencing_experiment" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "service_request_id" INTEGER REFERENCES "service_request" ("id") NOT NULL,
    "sample_id" INTEGER REFERENCES "sample" ("id") NOT NULL,
    "aliquot" TEXT NOT NULL,
    "run_name" TEXT,
    "run_alias" TEXT,
    "run_date" date,
    "sequencer" TEXT,
    "capture_kit" TEXT,
    "is_paired_end" BOOLEAN,
    "read_length" INTEGER,
    "protocol" Text
);

CREATE INDEX IF NOT EXISTS idx_sequencing_service_request_id ON "sequencing_experiment" ("service_request_id");

CREATE INDEX IF NOT EXISTS idx_seqencing_sample_id ON "sequencing_experiment" ("sample_id");

-- Tasks and Documents -------------------------------------------------------------------------

CREATE TABLE IF NOT EXISTS "task" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "task_catalog_id" INTEGER REFERENCES "task_catalog" ("id") NOT NULL,
    "performer_org_id" INTEGER REFERENCES "organization" ("id") NOT NULL,
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL
);


CREATE TABLE IF NOT EXISTS "task_has_sequencing_experiments" (
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "sequencing_experiment_id" INTEGER REFERENCES "sequencing_experiment" ("id") NOT NULL,
    PRIMARY KEY ("task_id", "sequencing_experiment_id")
);

CREATE TABLE IF NOT EXISTS "task_has_related_tasks" (
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "related_task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    PRIMARY KEY ("task_id", "related_task_id")
);

CREATE TABLE IF NOT EXISTS "task_workflows" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "workflow_name" TEXT NOT NULL,
    "version" TEXT NOT NULL,
    "parameter" TEXT,
    "rank_in_task" SMALLINT,
    "url" TEXT
);

CREATE INDEX IF NOT EXISTS idx_task_workflows_task_id ON "task_workflows" ("task_id");

CREATE TABLE IF NOT EXISTS "document" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "file_name" TEXT NOT NULL,
    "data_category" TEXT NOT NULL REFERENCES "data_categories"("code"),
    "data_type" TEXT REFERENCES "data_types"("code") NOT NULL,
    "format" TEXT REFERENCES "file_formats"("code") NOT NULL,
    "size" BIGINT NOT NULL,
    "url" TEXT NOT NULL,
    "hash" TEXT,
    "custodian_id" INTEGER REFERENCES "organization"("id") NOT NULL,
    "created_on" TIMESTAMP NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_document_data_category ON "document" ("data_category");

CREATE INDEX IF NOT EXISTS idx_document_data_type ON "document" ("data_type");

CREATE INDEX IF NOT EXISTS idx_document_format ON "document" ("format");

CREATE TABLE IF NOT EXISTS "task_has_documents" (
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "document_id" INTEGER REFERENCES "document" ("id") NOT NULL,
    PRIMARY KEY ("task_id", "document_id")
);

CREATE TABLE IF NOT EXISTS "document_has_patients" (
    "document_id" INTEGER REFERENCES "document" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "case_id" INTEGER REFERENCES "case" ("id") NOT NULL,
    "sample_id" INTEGER REFERENCES "sample" ("id"),
    PRIMARY KEY ("document_id", "patient_id", "case_id", "sample_id")
);
-- Value Sets initial values -------------------------------------

INSERT INTO "observation_categories" ("code", "name_en", "name_fr") VALUES
('social_history', 'Social History', 'Histoire sociale'),
('vital_sign', 'Vital Sign', 'Signe vital'),
('imaging', 'Imaging', 'Imagerie'),
('laboratory', 'Laboratory', 'Laboratoire'),
('procedure', 'Procedure', 'Procédure'),
('survey', 'Survey', 'Questionnaire'),
('exam', 'Exam', 'Examen'),
('therapy', 'Therapy', 'Thérapie'),
('activity', 'Activity', 'Activité')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "observations" ("code", "name_en", "name_fr", "category") 
VALUES 
    ('phenotype', 'Clinical sign', 'Signe clinique', 'exam'),
    ('condition', 'Condition', 'Condition', 'exam'),
    ('ethnicity', 'Ethnicity', 'Ethnicité', 'social_history')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "onsets" ("code", "name_en", "name_fr") 
VALUES 
    ('unknown', 'Unknown', 'Inconnu'),
    ('antenatal', 'Antenatal', 'Anténatale'),
    ('congenital', 'Congenital', 'Congénitale'),
    ('neonatal', 'Neonatal (< 28 days)', 'Néonatale (< 28 jours)'),
    ('infantile', 'Infantile (>= 28 days and < 1 year)', 'Enfant en bas âge (>= 28 jours et < 1 an)'),
    ('childhood', 'Childhood (>= 1 year and < 5 years)', 'Enfance (>= 1 an et < 5 ans)'),
    ('juvenile', 'Juvenile (>= 5 years and < 16 years)', 'Juvénile (>= 5 ans et < 16 ans)'),
    ('young_adult', 'Young Adult (>= 16 years and < 40 years)', 'Jeune adulte (>= 16 ans et < 40 ans)'),
    ('middle_age', 'Middle Age (>= 40 years and < 60 years)', 'Adulte d''âge moyen (>= 40 ans et < 60 ans)'),
    ('senior', 'Senior (>= 60 years)', 'Adulte sénior (>= 60 ans)')
ON CONFLICT (code) DO NOTHING;


INSERT INTO data_types (code, name_en, name_fr) 
VALUES 
    ('alignment', 'Aligned Reads', 'Fragments alignés'),
    ('snv', 'Germline SNV', 'SNV germinal'),
    ('ssnv', 'Somatic SNV', 'SNV somatic'),
    ('gcnv', 'Germline CNV', 'CNV germinal'),
    ('scnv', 'Somatic CNV', 'CNV somatic'),
    ('gsv', 'Germline SV', 'SV germinal'),
    ('ssv', 'Somatic SV', 'SV somatic'),
    ('somfu', 'Somatic Fusion Dragen VCF', 'VCF Dragen des fusions somatiques'),
    ('ssup', 'Sequencing Data Supplement', 'Données de séquençage supplémentaires'),
    ('igv', 'IGV Track', 'Track IGV'),
    ('cnvvis', 'CNV Visualization', 'Visualization de CNVs'),
    ('exp', 'Expression PNG', 'PNG des expressions'),
    ('covgene', 'Coverage by Gene Report', 'Rapport de couverture par gène'),
    ('qcrun', 'Sequencing Run QC Report', 'Rapport de controle de qualité de la run de séquençage'),
    ('exomiser', 'Exomiser Report', 'Rapport Exomiser')
ON CONFLICT (code) DO NOTHING;

INSERT INTO file_formats (code, name_en, name_fr) 
VALUES 
    ('cram', 'CRAM File', 'Fichier CRAM'),
    ('crai', 'CRAI Index File', 'Fichier d''index CRAI'),
    ('vcf', 'VCF File', 'Fichier VCF'),
    ('tbi', 'TBI Index File', 'Fichier d''index TBI'),
    ('tgz', 'TGZ Archive File', 'Fichier d''archive TGZ'),
    ('json', 'JSON File', 'Fichier JSON'),
    ('html', 'HTML File', 'Fichier HTML'),
    ('tsv', 'TSV File', 'Fichier TSV'),
    ('bw', 'BW File', 'Fichier BW'),
    ('bed', 'BED File', 'Fichier BED'),
    ('png', 'PNG File', 'Fichier PNG'),
    ('csv', 'CSV File', 'Fichier CSV'),
    ('pdf', 'PDF File', 'Fichier PDF'),
    ('txt', 'Text File', 'Fichier texte')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "organization_categories" ("code", "name_en", "name_fr") VALUES
('diagnostic_laboratory', 'Diagnostic Laboratory', 'Laboratoire de diagnostic'),
('healthcare_provider', 'Healthcare Provider', 'Fournisseur de soins de santé'),
('research_institute', 'Research Institute', 'Institut de recherche'),
('sequencing_center', 'Sequencing Center', 'Centre de séquençage')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "practitioner_roles" ("code", "name_en", "name_fr") VALUES
('doctor', 'Doctor', 'Médecin'),
('geneticist', 'Geneticist', 'Généticien'),
('bioinformatician', 'Bioinformatician', 'Bioinformaticien'),
('genetic_counsellor', 'Genetic Counsellor', 'Conseiller en génétique'),
('administrative_assistant', 'Administrative Assistant', 'Adjoint administratif'),
('resident', 'Resident', 'Résident')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "sexes" ("code", "name_en", "name_fr") VALUES
('male', 'Male', 'Masculin'),
('female', 'Female', 'Féminin'),
('unknown', 'Unknown', 'Inconnu')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "genome_analysis_types" ("code", "name_en", "name_fr") VALUES
('germline', 'Germline', 'Germinal'),
('somatic', 'Somatic', 'Somatique')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "family_analysis_types" ("code", "name_en", "name_fr") VALUES
('single', 'Single', 'Individuel'),
('familial', 'Familial', 'Familial'),
('both', 'Both', 'Les deux')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "life_stage_types" ("code", "name_en", "name_fr") VALUES
('prenatal', 'Prenatal', 'Prénatal'),
('postnatal', 'Postnatal', 'Postnatal'),
('both', 'Both', 'Les deux')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "case_types" ("code", "name_en", "name_fr") VALUES
('single_germline', 'Single Germline', 'Germinal individuel'),
('familial_germline', 'Familial Germline', 'Germinal familial'),
('tumor', 'Tumor', 'Tumeur')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "request_statuses" ("code", "name_en", "name_fr") VALUES
('unknown', 'Unknown', 'Inconnu'),
('draft', 'Draft', 'Brouillon'),
('active', 'Active', 'Actif'),
('revoke', 'Revoke', 'Révoqué'),
('completed', 'Completed', 'Terminé'),
('on-hold', 'On-hold', 'En attente'),
('incomplete', 'Incomplete', 'Incomplet')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "request_priorities" ("code", "name_en", "name_fr") VALUES
('routine', 'Routine', 'Routinière'),
('urgent', 'Urgent', 'Urgente'),
('asap', 'Asap', 'Dès que possible'),
('stat', 'Stat', 'Immédiatement')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "event_types" ("code", "name_en", "name_fr") VALUES
('unknown', 'Unknown', 'Inconnu'),
('baseline', 'Baseline Visit', 'Visite initiale'),
('follow_up', 'Follow Up', 'Suivi'),
('treatment', 'Treatment', 'Traitement')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "experimental_strategies" ("code", "name_en", "name_fr") VALUES
('wgs', 'WGS', 'WGS'),
('wxs', 'WXS', 'WXS'),
('wts', 'WTS', 'WTS')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "technology_platforms" ("code", "name_en", "name_fr") VALUES
('illumina', 'Illumina', 'Illumina'),
('pacbio', 'Pacbio', 'PacBio'),
('nanopore', 'Nanopore', 'Nanopore')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "family_relationships" ("code", "name_en", "name_fr") VALUES
('mother', 'Mother', 'Mère'),
('father', 'Father', 'Père'),
('brother', 'Brother', 'Frère'),
('sister', 'Sister', 'Sœur')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "obs_interpretations" ("code", "name_en", "name_fr") VALUES
('positive', 'Positive', 'Positif'),
('negative', 'Negative', 'Négatif')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "sample_categories" ("code", "name_en", "name_fr") VALUES
('specimen', 'Specimen', 'Spécimen'),
('sample', 'Sample', 'Échantillon')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "sample_types" ("code", "name_en", "name_fr") VALUES
('dna', 'Dna', 'ADN'),
('rna', 'Rna', 'ARN'),
('blood', 'Blood', 'Sang'),
('solid_tissue', 'Solid Tissue', 'Tissu solide')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "histology_types" ("code", "name_en", "name_fr") VALUES
('tumoral', 'Tumoral', 'Tumoral'),
('normal', 'Normal', 'Normal')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "affected_statuses" ("code", "name_en", "name_fr") VALUES
('affected', 'Affected', 'Atteint'),
('non_affected', 'Non Affected', 'Non atteint'),
('unknown', 'Unknown', 'Inconnu')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "age_units" ("code", "name_en", "name_fr") VALUES
('day', 'Day', 'Jour'),
('month', 'Month', 'Mois'),
('year', 'Year', 'An')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "data_categories" ("code", "name_en", "name_fr") VALUES
('clinical', 'Clinical', 'Clinique'),
('genomic', 'Genomic', 'Génomique')
ON CONFLICT (code) DO NOTHING;

-- Catalogs initial values ----------------------------

INSERT INTO analysis_catalog (id, code, name_en, name_fr, genome, family, life_stage) 
VALUES 
    (1, 'WGA', 'Whole Genome Analysis', 'Analyse du génome complet', 'germline', 'both', 'postnatal') 
ON CONFLICT (id) DO NOTHING;

INSERT INTO service_catalog (id, code, alias, name_en, name_fr, experimental_strategy, platform) 
VALUES 
    (1, 'WGS', '948004', 'Whole Genome Sequencing', 'Séquençage du génome complet', 'wgs', 'illumina') 
ON CONFLICT (id) DO NOTHING;

INSERT INTO task_catalog (id, code, name_en, name_fr) 
VALUES 
    (1, 'NEBA', 'Normal Exome Bioinformatic Analysis', 'Analyse bioinformatique d''exomes normaux'),
    (2, 'TRBA', 'Transcriptome Bioinformatic Analysis', 'Analyse bioinformatique de transcriptomes'),
    (3, 'TEBA', 'Tumoral Exome Bioinformatic Analysis', 'Analyse bioinformatique d''exomes tumoraux'),
    (4, 'TNEBA', 'Tumor-Normal Exomes Bioinformatic Analysis', 'Analyse bioinformatique des exomes tumoraux et normaux'),
    (5, 'GGBA', 'Germline Genome Bioinformatic Analysis', 'Analyse bioinformatique de génomes germinaux') 
ON CONFLICT (id) DO NOTHING;