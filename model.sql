DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'organization_category') THEN
        CREATE TYPE organization_category AS ENUM (
            'diagnostic_laboratory',
            'healthcare_provider',
            'research_institute',
            'university'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'status') THEN
        CREATE TYPE status AS ENUM (
            'draft',
            'unknown',
            'active',
            'revoke',
            'completed',
            'on-hold',
            'incomplete'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'practitioner_role') THEN
        CREATE TYPE practitioner_role AS ENUM (
            'doctor',
            'geneticist'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sex') THEN
        CREATE TYPE sex AS ENUM (
            'male',
            'female',
            'unknown'
        );
    END IF;
        IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'observation_category') THEN
        CREATE TYPE observation_category AS ENUM (
            'social-history',
            'vital-sign',
            'imaging',
            'laboratory',
            'procedure',
            'survey',
            'exam',
            'therapy',
            'activity'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'genome_analysis_type') THEN
        CREATE TYPE genome_analysis_type AS ENUM (
            'germline',
            'somatic'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'family_analysis_type') THEN
        CREATE TYPE family_analysis_type AS ENUM (
            'single',
            'familial',
            'both'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'life_stage_type') THEN
        CREATE TYPE life_stage_type AS ENUM (
            'prenatal',
            'postnatal',
            'both'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'case_type') THEN
        CREATE TYPE case_type AS ENUM (
            'single_germline_case',
            'familial_germline_case',
            'tumor_case'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'request_status') THEN
        CREATE TYPE request_status AS ENUM (
            'unknown',
            'draft',
            'active',
            'revoke',
            'completed',
            'on-hold',
            'incomplete'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'request_priority') THEN
        CREATE TYPE request_priority AS ENUM (
            'routine',
            'urgent',
            'asap',
            'stat'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_type') THEN
        CREATE TYPE event_type AS ENUM (
            'unknown',
            'baseline',
            'follow_up',
            'treatment'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'experimental_strategy') THEN
        CREATE TYPE experimental_strategy AS ENUM (
            'wgs',
            'wxs',
            'wts'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'technology_platform') THEN
        CREATE TYPE technology_platform AS ENUM (
            'illumina_novaseq',
            'pacbio',
            'nanopore'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'family_relationship') THEN
        CREATE TYPE family_relationship AS ENUM (
            'mother',
            'father',
            'brother',
            'sister'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'obs_interpretation') THEN
        CREATE TYPE obs_interpretation AS ENUM (
            'positive',
            'negative'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sample_category') THEN
        CREATE TYPE sample_category AS ENUM (
            'specimen',
            'sample'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sample_type') THEN
        CREATE TYPE sample_type AS ENUM (
            'dna',
            'rna',
            'blood',
            'solid_tissue'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'histology_type') THEN
        CREATE TYPE histology_type AS ENUM (
            'tumoral',
            'normal'
        );
    END IF;
END
$$  LANGUAGE plpgsql;

--  Directory Tables

CREATE TABLE IF NOT EXISTS "Observation_dir" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "category" observation_category NOT NULL,
    "description" VARCHAR
);

CREATE TABLE IF NOT EXISTS "Analysis_dir" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "genome" genome_analysis_type,
    "family" family_analysis_type,
    "life_stage" life_stage_type,
    "description" VARCHAR,
    "panel_id" INTEGER,
    "reflex_panel_id" INTEGER
);

CREATE TABLE IF NOT EXISTS "Service_dir" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "alias" VARCHAR UNIQUE,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "experimental_strategy" experimental_strategy,
    "platform" technology_platform,
    "description" VARCHAR
);
-- Actor Tables
CREATE TABLE IF NOT EXISTS "Organization" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name" VARCHAR NOT NULL,
    "category" organization_category NOT NULL
);

CREATE TABLE "Practitioner" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_name" VARCHAR NOT NULL,
    "first_name" VARCHAR NOT NULL,
    "licence" VARCHAR UNIQUE,
    "prefix" VARCHAR,
    "suffix" VARCHAR
);

CREATE INDEX idx_practitioner_name ON "Practitioner" ("last_name", "first_name");

CREATE TABLE IF NOT EXISTS "Practitioner_role" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "practitioner_id" INTEGER REFERENCES "Practitioner" ("id"),
    "organization_id" INTEGER REFERENCES "Organization" ("id"),
    "role" practitioner_role NOT NULL,
    "email" VARCHAR,
    "phone" VARCHAR,
    CONSTRAINT unique_role_in_organization UNIQUE ("practitioner_id", "organization_id", "role")
);

CREATE INDEX IF NOT EXISTS idx_practitioner_role_organization_id ON "Practitioner_role" ("organization_id");

-- Patient Tables
CREATE TABLE IF NOT EXISTS "Person" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_name" VARCHAR NOT NULL,
    "first_name" VARCHAR NOT NULL,
    "sex" sex NOT NULL,
    "dob" DATE,
    "jhn" VARCHAR UNIQUE
);
CREATE INDEX idx_person_name ON "Person" ("last_name", "first_name");

CREATE TABLE IF NOT EXISTS "Patient" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" VARCHAR,
    "person_id" INTEGER REFERENCES "Person"("id") NOT NULL,
    "sex" sex NOT NULL,
    "mrn" VARCHAR,
    "managing_organization_id" INTEGER REFERENCES "Organization"("id"),
    "note" TEXT,
    CONSTRAINT unique_mrn_org UNIQUE ("mrn", "managing_organization_id")
);

CREATE TABLE IF NOT EXISTS "Study" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name" VARCHAR NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "Study_has_patient" (
    "study_id" INTEGER REFERENCES "Study" ("id"),
    "patient_id" INTEGER REFERENCES "Patient" ("id"),
    PRIMARY KEY ("study_id", "patient_id")
);

-- Case Tables

CREATE TABLE IF NOT EXISTS "Project" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name" VARCHAR NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "Case" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "analysis_id" INTEGER REFERENCES "Analysis_dir" ("id") NOT NULL,
    "project_id" INTEGER REFERENCES "Project" ("id") NOT NULL,
    "proband_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "type" case_type NOT NULL,
    "status" request_status NOT NULL,
    "priority" request_priority NOT NULL,
    "life_stage" life_stage_type NOT NULL,
    "requester_id" INTEGER REFERENCES "Practitioner_role" ("id"),
    "performer_id" INTEGER REFERENCES "Organization" ("id"),
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL,
    "reflex_panel" BOOLEAN,
    "diagnosis_hypothesis" VARCHAR,
    "note" text
);

CREATE INDEX IF NOT EXISTS idx_case_analysis_id ON "Case" ("analysis_id");

CREATE INDEX IF NOT EXISTS idx_case_project_id ON "Case" ("project_id");

CREATE INDEX IF NOT EXISTS idx_case_proband_id ON "Case" ("proband_id");

CREATE INDEX IF NOT EXISTS idx_case_requester_id ON "Case" ("requester_id");

CREATE INDEX IF NOT EXISTS idx_case_performer_id ON "Case" ("performer_id");

CREATE TABLE IF NOT EXISTS "Service_request" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "service_id" INTEGER REFERENCES "Service_dir" ("id") NOT NULL,
    "case_id" INTEGER REFERENCES "Case" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "status" request_status NOT NULL,
    "priority" request_priority NOT NULL,
    "requester_id" INTEGER REFERENCES "Practitioner_role" ("id"),
    "performer_id" INTEGER REFERENCES "Organization" ("id"),
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL,
    "note" text
);

CREATE INDEX IF NOT EXISTS idx_service_service_id ON "Service_request" ("service_id");

CREATE INDEX IF NOT EXISTS idx_service_case_id ON "Service_request" ("case_id");

CREATE INDEX IF NOT EXISTS idx_service_patient_id ON "Service_request" ("patient_id");

CREATE INDEX IF NOT EXISTS idx_service_requester_id ON "Service_request" ("requester_id");

CREATE INDEX IF NOT EXISTS idx_service_performer_id ON "Service_request" ("performer_id");


-- Observation Tables
CREATE TABLE IF NOT EXISTS "Family" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" VARCHAR,
    "case_id" INTEGER REFERENCES "Case" ("id") NOT NULL,
    "proband_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "family_member_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "relationship_to_proband" family_relationship NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_family_case_id ON "Family" ("case_id");
CREATE INDEX IF NOT EXISTS idx_family_patient_id ON "Family" ("proband_id");

CREATE TABLE IF NOT EXISTS "Event" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "Case" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "type" event_type NOT NULL,
    "age_at_event" NUMERIC(6,1),
    "age_at_event_unit" VARCHAR,
    "start_date" DATE,
    "end_date" DATE
);

CREATE TABLE IF NOT EXISTS "Observation_coding" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "Case" ("id")  NOT NULL,
    "patient_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "event_id" INTEGER REFERENCES "Event" ("id"),
    "observation_id" INTEGER REFERENCES "Observation_dir" ("id") NOT NULL,
    "code_system" VARCHAR NOT NULL,
    "code_value" VARCHAR NOT NULL,
    "term_value" VARCHAR NOT NULL,
    "onset" VARCHAR NOT NULL,
    "interpretation" obs_interpretation,
    "note" TEXT
);
CREATE INDEX IF NOT EXISTS idx_observation_case_id ON "Observation_coding" ("case_id");
CREATE INDEX IF NOT EXISTS idx_observation_patient_id ON "Observation_coding" ("patient_id");

-- Sample Tables
CREATE TABLE IF NOT EXISTS "Sample" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" VARCHAR,
    "category" sample_category NOT NULL,
    "type" sample_type NOT NULL,
    "patient_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "parent_specimen_id" INTEGER REFERENCES "Sample"("id"),
    "tissue_site" VARCHAR,
    "histology" histology_type
);
CREATE INDEX IF NOT EXISTS idx_sample_parent_id ON "Sample" ("parent_specimen_id");
CREATE INDEX IF NOT EXISTS idx_sample_patient_id ON "Sample" ("patient_id");

CREATE TABLE IF NOT EXISTS "Request_has_sample" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "request_id" INTEGER NOT NULL,
    "sample_id" INTEGER NOT NULL,
    CONSTRAINT unique_request_sample_id UNIQUE ("request_id", "sample_id")
);
CREATE INDEX IF NOT EXISTS idx_request_sample_id ON "Request_has_sample" ("sample_id");

-- Experiment tables

CREATE TABLE IF NOT EXISTS "Sequencing_experiment" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "service_request_id" INTEGER REFERENCES "Service_request" ("id") NOT NULL,
    "case_id" INTEGER REFERENCES "Case" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "Patient" ("id") NOT NULL,
    "aliquot" VARCHAR NOT NULL,
    "sample_id" INTEGER REFERENCES "Sample" ("id") NOT NULL,
    "run_name" VARCHAR,
    "run_alias" VARCHAR,
    "run_date" date,
    "sequencer" VARCHAR,
    "capture_kit" VARCHAR,
    "is_paired_end" BOOLEAN,
    "read_length" INTEGER,
    "protocol" Text
);
CREATE INDEX IF NOT EXISTS idx_sequencing_service_request_id ON "Sequencing_experiment" ("service_request_id");
CREATE INDEX IF NOT EXISTS idx_sequencing_case_id ON "Sequencing_experiment" ("case_id");
CREATE INDEX IF NOT EXISTS idx_seqencing_patient_id ON "Sequencing_experiment" ("patient_id");
CREATE INDEX IF NOT EXISTS idx_seqencing_sample_id ON "Sequencing_experiment" ("sample_id");