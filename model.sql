DO $$
BEGIN
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'organization_category') THEN
        CREATE TYPE organization_category AS ENUM (
            'diagnostic_laboratory',
            'healthcare_provider',
            'research_institute',
            'university'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'practitioner_role') THEN
        CREATE TYPE practitioner_role AS ENUM (
            'doctor',
            'geneticist'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sex') THEN
        CREATE TYPE sex AS ENUM (
            'male',
            'female',
            'unknown'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'observation_category') THEN
        CREATE TYPE observation_category AS ENUM (
            'social_history',
            'vital_sign',
            'imaging',
            'laboratory',
            'procedure',
            'survey',
            'exam',
            'therapy',
            'activity'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'genome_analysis_type') THEN
        CREATE TYPE genome_analysis_type AS ENUM (
            'germline',
            'somatic'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'family_analysis_type') THEN
        CREATE TYPE family_analysis_type AS ENUM (
            'single',
            'familial',
            'both'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'life_stage_type') THEN
        CREATE TYPE life_stage_type AS ENUM (
            'prenatal',
            'postnatal',
            'both'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'case_type') THEN
        CREATE TYPE case_type AS ENUM (
            'single_germline_case',
            'familial_germline_case',
            'tumor_case'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'request_status') THEN
        CREATE TYPE request_status AS ENUM (
            'unknown',
            'draft',
            'active',
            'revoke',
            'completed',
            'on-hold',
            'incomplete'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'request_priority') THEN
        CREATE TYPE request_priority AS ENUM (
            'routine',
            'urgent',
            'asap',
            'stat'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'event_type') THEN
        CREATE TYPE event_type AS ENUM (
            'unknown',
            'baseline',
            'follow_up',
            'treatment'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'experimental_strategy') THEN
        CREATE TYPE experimental_strategy AS ENUM (
            'wgs',
            'wxs',
            'wts'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'technology_platform') THEN
        CREATE TYPE technology_platform AS ENUM (
            'illumina',
            'pacbio',
            'nanopore'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'family_relationship') THEN
        CREATE TYPE family_relationship AS ENUM (
            'mother',
            'father',
            'brother',
            'sister'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'obs_interpretation') THEN
        CREATE TYPE obs_interpretation AS ENUM (
            'positive',
            'negative'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sample_category') THEN
        CREATE TYPE sample_category AS ENUM (
            'specimen',
            'sample'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'sample_type') THEN
        CREATE TYPE sample_type AS ENUM (
            'dna',
            'rna',
            'blood',
            'solid_tissue'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'histology_type') THEN
        CREATE TYPE histology_type AS ENUM (
            'tumoral',
            'normal'
        );
    END IF;
    IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'affected_status') THEN
        CREATE TYPE affected_status AS ENUM (
            'affected',
            'non_affected',
            'unknown'
        );
    END IF;
END;
$$  LANGUAGE plpgsql;

--  Catalogs 
CREATE TABLE IF NOT EXISTS "analysis_catalog" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "genome" genome_analysis_type,
    "family" family_analysis_type,
    "life_stage" life_stage_type,
    "description" VARCHAR,
    "panel_id" INTEGER,
    "reflex_panel_id" INTEGER
);

CREATE TABLE IF NOT EXISTS "service_catalog" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "alias" VARCHAR UNIQUE,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "experimental_strategy" experimental_strategy,
    "platform" technology_platform,
    "description" TEXT
);

-- Value Sets
CREATE TABLE IF NOT EXISTS "observation_codes" (
    "code" VARCHAR PRIMARY KEY,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "category" observation_category NOT NULL,
    "description" TEXT
);
INSERT INTO "observation_codes" ("code", "name_en", "name_fr", "category", "description") VALUES
('phenotype', 'Clinical sign', 'Signe clinique', 'exam', NULL),
('condition', 'Condition', 'Condition', 'exam', NULL),
('ethnicity', 'Ethnicity', 'Ethnicité', 'social_history',NULL)
ON CONFLICT (code) DO NOTHING;

CREATE TABLE IF NOT EXISTS "onset_codes" (
    "code" VARCHAR PRIMARY KEY,
    "name_en" VARCHAR NOT NULL,
    "name_fr" VARCHAR,
    "description" TEXT
);

INSERT INTO "onset_codes" ("code", "name_en", "name_fr", "description") VALUES
('unknown', 'Unknown', 'Inconnu', NULL),
('antenatal', 'Antenatal', 'Anténatale', NULL),
('congenital', 'Congenital', 'Congénitale', NULL),
('neonatal', 'Neonatal (< 28 days)', 'Néonatale (< 28 jours)', NULL),
('infantile', 'Infantile (>= 28 days and < 1 year)', 'Enfant en bas âge (>= 28 jours et < 1 an)', NULL),
('childhood', 'Childhood (>= 1 year and < 5 years)', 'Enfance (>= 1 an et < 5 ans)', NULL),
('juvenile', 'Juvenile (>= 5 years and < 16 years)', 'Juvénile (>= 5 ans et < 16 ans)', NULL),
('young_adult', 'Young Adult (>= 16 years and < 40 years)', 'Jeune adulte (>= 16 ans et < 40 ans)', NULL),
('middle_age', 'Middle Age (>= 40 years and < 60 years)', 'Adulte d''âge moyen (>= 40 ans et < 60 ans)', NULL),
('senior', 'Senior (>= 60 years)', 'Adulte sénior (>= 60 ans)', NULL)
ON CONFLICT (code) DO NOTHING;

-- Actors
CREATE TABLE IF NOT EXISTS "organization" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name" VARCHAR NOT NULL,
    "category" organization_category NOT NULL
);

CREATE TABLE IF NOT EXISTS "practitioner" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_name" VARCHAR NOT NULL,
    "first_name" VARCHAR NOT NULL,
    "license" VARCHAR,
    "prefix" VARCHAR,
    "suffix" VARCHAR
);

CREATE INDEX IF NOT EXISTS idx_practitioner_name ON "practitioner" ("last_name", "first_name");

CREATE TABLE IF NOT EXISTS "practitioner_has_roles" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "practitioner_id" INTEGER REFERENCES "practitioner" ("id"),
    "organization_id" INTEGER REFERENCES "organization" ("id"),
    "role" practitioner_role NOT NULL,
    "email" VARCHAR,
    "phone" VARCHAR,
    CONSTRAINT unique_role_in_organization UNIQUE ("practitioner_id", "organization_id", "role")
);

CREATE INDEX IF NOT EXISTS idx_practitioner_has_role_organization_id ON "practitioner_has_roles" ("organization_id");

-- Patients
CREATE TABLE IF NOT EXISTS "person" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "last_name" VARCHAR NOT NULL,
    "first_name" VARCHAR NOT NULL,
    "sex" sex NOT NULL,
    "dob" DATE,
    "jhn" VARCHAR UNIQUE
);
CREATE INDEX IF NOT EXISTS idx_person_name ON "person" ("last_name", "first_name");

CREATE TABLE IF NOT EXISTS "patient" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" VARCHAR,
    "person_id" INTEGER REFERENCES "person"("id") NOT NULL,
    "sex" sex NOT NULL,
    "mrn" VARCHAR,
    "managing_organization_id" INTEGER REFERENCES "organization"("id"),
    "note" TEXT,
    CONSTRAINT unique_mrn_org UNIQUE ("mrn", "managing_organization_id")
);

CREATE TABLE IF NOT EXISTS "study" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name" VARCHAR NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "study_has_patients" (
    "study_id" INTEGER REFERENCES "study" ("id"),
    "patient_id" INTEGER REFERENCES "patient" ("id"),
    PRIMARY KEY ("study_id", "patient_id")
);

-- Cases 

CREATE TABLE IF NOT EXISTS "project" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" VARCHAR NOT NULL UNIQUE,
    "name" VARCHAR NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "case" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "analysis_catalog_id" INTEGER REFERENCES "analysis_catalog" ("id") NOT NULL,
    "project_id" INTEGER REFERENCES "project" ("id") NOT NULL,
    "proband_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "type" case_type NOT NULL,
    "status" request_status NOT NULL,
    "priority" request_priority NOT NULL,
    "life_stage" life_stage_type NOT NULL,
    "requester_id" INTEGER REFERENCES "practitioner_has_roles" ("id"),
    "performer_id" INTEGER REFERENCES "organization" ("id"),
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL,
    "reflex_panel" BOOLEAN,
    "diagnosis_hypothesis" VARCHAR,
    "note" text
);

CREATE INDEX IF NOT EXISTS idx_case_analysis_catalog_id ON "case" ("analysis_catalog_id");

CREATE INDEX IF NOT EXISTS idx_case_project_id ON "case" ("project_id");

CREATE INDEX IF NOT EXISTS idx_case_proband_id ON "case" ("proband_id");

CREATE INDEX IF NOT EXISTS idx_case_requester_id ON "case" ("requester_id");

CREATE INDEX IF NOT EXISTS idx_case_performer_id ON "case" ("performer_id");

CREATE TABLE IF NOT EXISTS "service_request" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "service_catalog_id" INTEGER REFERENCES "service_catalog" ("id") NOT NULL,
    "case_id" INTEGER REFERENCES "case" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "status" request_status NOT NULL,
    "priority" request_priority NOT NULL,
    "requester_id" INTEGER REFERENCES "practitioner_has_roles" ("id"),
    "performer_id" INTEGER REFERENCES "organization" ("id"),
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL,
    "note" text
);

CREATE INDEX IF NOT EXISTS idx_service_service_id ON "service_request" ("service_catalog_id");

CREATE INDEX IF NOT EXISTS idx_service_case_id ON "service_request" ("case_id");

CREATE INDEX IF NOT EXISTS idx_service_patient_id ON "service_request" ("patient_id");

CREATE INDEX IF NOT EXISTS idx_service_requester_id ON "service_request" ("requester_id");

CREATE INDEX IF NOT EXISTS idx_service_performer_id ON "service_request" ("performer_id");


--Observations 

CREATE TABLE IF NOT EXISTS "family" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" VARCHAR,
    "case_id" INTEGER REFERENCES "case" ("id") NOT NULL,
    "proband_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "family_member_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "relationship_to_proband" family_relationship NOT NULL,
    "affected_status" affected_status
);
CREATE INDEX IF NOT EXISTS idx_family_case_id ON "family" ("case_id");
CREATE INDEX IF NOT EXISTS idx_family_patient_id ON "family" ("proband_id");

CREATE TABLE IF NOT EXISTS "event" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "case" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "type" event_type NOT NULL,
    "age_at_event" NUMERIC(6,1),
    "age_at_event_unit" VARCHAR,
    "start_date" DATE,
    "end_date" DATE
);

CREATE TABLE IF NOT EXISTS "observation_coding" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "case" ("id")  NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "event_id" INTEGER REFERENCES "event" ("id"),
    "observation_code" VARCHAR REFERENCES "observation_codes" ("code") NOT NULL,
    "coding_system" VARCHAR NOT NULL,
    "code_value" VARCHAR NOT NULL,
    "onset" VARCHAR REFERENCES "onset_codes" ("code") NOT NULL,
    "interpretation" obs_interpretation,
    "note" TEXT
);
CREATE INDEX IF NOT EXISTS idx_observation_case_id ON "observation_coding" ("case_id");
CREATE INDEX IF NOT EXISTS idx_observation_patient_id ON "observation_coding" ("patient_id");

-- samples & sequencing
CREATE TABLE IF NOT EXISTS "sample" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "submitter_id" VARCHAR,
    "category" sample_category NOT NULL,
    "type" sample_type NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "parent_specimen_id" INTEGER REFERENCES "sample"("id"),
    "tissue_site" VARCHAR,
    "histology" histology_type
);
CREATE INDEX IF NOT EXISTS idx_sample_parent_id ON "sample" ("parent_specimen_id");
CREATE INDEX IF NOT EXISTS idx_sample_patient_id ON "sample" ("patient_id");

CREATE TABLE IF NOT EXISTS "sequencing_experiment" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "service_request_id" INTEGER REFERENCES "service_request" ("id") NOT NULL,
    "sample_id" INTEGER REFERENCES "sample" ("id") NOT NULL,
    "aliquot" VARCHAR NOT NULL,
    "run_name" VARCHAR,
    "run_alias" VARCHAR,
    "run_date" date,
    "sequencer" VARCHAR,
    "capture_kit" VARCHAR,
    "is_paired_end" BOOLEAN,
    "read_length" INTEGER,
    "protocol" Text
);
CREATE INDEX IF NOT EXISTS idx_sequencing_service_request_id ON "sequencing_experiment" ("service_request_id");
CREATE INDEX IF NOT EXISTS idx_seqencing_sample_id ON "sequencing_experiment" ("sample_id");