-- Value Sets ---------------------------------------------------------------

CREATE TABLE IF NOT EXISTS "sexes" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "observation_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "case_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "statuses" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "priorities" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "experimental_strategies" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "platforms" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "family_relationships" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "obs_interpretations" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "sample_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "sample_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "histology_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "affected_statuses" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "data_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "observations" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL,
    "category" TEXT NOT NULL REFERENCES "observation_categories"("code") 
);

CREATE TABLE IF NOT EXISTS "onsets" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "data_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "file_formats" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);
CREATE TABLE IF NOT EXISTS "task_types" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

CREATE TABLE IF NOT EXISTS "organization_categories" (
    "code" TEXT PRIMARY KEY,
    "name_en" TEXT NOT NULL
);

-- Patients ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "organization" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name" TEXT NOT NULL,
    "category" TEXT NOT NULL REFERENCES "organization_categories"("code")
);

CREATE TABLE IF NOT EXISTS "patient" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "mrn" TEXT,
    "managing_organization_id" INTEGER REFERENCES "organization" ("id"),
    "sex" TEXT NOT NULL REFERENCES "sexes"("code"),
    "dob" DATE,
    CONSTRAINT unique_mrn_org UNIQUE (
        "mrn",
        "managing_organization_id"
    )
);
-- Cases ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "request" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "status" TEXT NOT NULL REFERENCES "statuses" NOT NULL,
    "priority" TEXT NOT NULL REFERENCES "priorities"("code"),
    "ordering_physician" TEXT,
    "ordering_organisation_id" INTEGER REFERENCES "organization"("id"),
    "order_number" TEXT,
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_request_status ON "request" ("status");
CREATE INDEX IF NOT EXISTS idx_request_priority ON "request" ("priority");
CREATE INDEX IF NOT EXISTS idx_request_created_on ON "request" ("created_on");


CREATE TABLE IF NOT EXISTS "project" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "code" TEXT NOT NULL UNIQUE,
    "name" TEXT NOT NULL,
    "description" TEXT
);

CREATE TABLE IF NOT EXISTS "case" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "proband_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "project_id" INTEGER REFERENCES "project"("id") NOT NULL,
    "type" TEXT REFERENCES "case_types"("code") NOT NULL,
    "status" TEXT NOT NULL REFERENCES "statuses"("code"),
    "primary_condition" TEXT,
    "panel_id" INTEGER,
    "request_id" INTEGER REFERENCES "request"("id"),
    "performer_lab_id" INTEGER REFERENCES "organization"("id"),
    "note" TEXT,
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_case_proband_id ON "case" ("proband_id");
CREATE INDEX IF NOT EXISTS idx_case_project_id ON "case" ("project_id");
CREATE INDEX IF NOT EXISTS idx_case_type ON "case" ("type");
CREATE INDEX IF NOT EXISTS idx_case_status ON "case" ("status");
CREATE INDEX IF NOT EXISTS idx_case_primary_condition ON "case" ("primary_condition");
CREATE INDEX IF NOT EXISTS idx_case_panel_id ON "case" ("panel_id");
CREATE INDEX IF NOT EXISTS idx_case_created_on ON "case" ("created_on");


CREATE TABLE IF NOT EXISTS "family" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "case"("id") NOT NULL,
    "family_member_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "relationship_to_proband" TEXT NOT NULL REFERENCES "family_relationships"("code"),
    "affected_status" TEXT NOT NULL REFERENCES "affected_statuses" ("code")
);

CREATE INDEX IF NOT EXISTS idx_family_case_id ON "family" ("case_id");

--Observations ---------------------------------------------------------------

CREATE TABLE IF NOT EXISTS "observation_coding" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "case"("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient"("id") NOT NULL,
    "observation_code" TEXT REFERENCES "observations"("code") NOT NULL,
    "coding_system" TEXT NOT NULL,
    "code_value" TEXT NOT NULL,
    "onset_code" TEXT REFERENCES "onsets"("code") NOT NULL,
    "interpretation" TEXT REFERENCES "obs_interpretations"("code"),
    "note" TEXT
);

CREATE INDEX IF NOT EXISTS idx_observation_case_id ON "observation_coding" ("case_id");
CREATE INDEX IF NOT EXISTS idx_observation_patient_id ON "observation_coding" ("patient_id");

-- samples & sequencing ---------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "sample" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "category" TEXT NOT NULL REFERENCES "sample_categories"("code"),
    "type" TEXT NOT NULL REFERENCES "sample_types"("code"),
    "parent_sample_id" INTEGER REFERENCES "sample"("id"),
    "tissue_site" TEXT,
    "histology" TEXT REFERENCES "histology_types"("code"),
    "submitter_id" TEXT
);

CREATE INDEX IF NOT EXISTS idx_sample_parent_id ON "sample" ("parent_sample_id");

CREATE TABLE IF NOT EXISTS "sequencing_experiment" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "case_id" INTEGER REFERENCES "case" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    "sample_id" INTEGER REFERENCES "sample" ("id") NOT NULL,
    "experimental_strategy" TEXT REFERENCES "experimental_strategies" ("code"),
    "status" TEXT NOT NULL REFERENCES "statuses"("code"),
    "aliquot" TEXT NOT NULL,
    "request_id" INTEGER REFERENCES "request"("id"),
    "performer_lab_id" INTEGER REFERENCES "organization"("id"),
    "run_name" TEXT,
    "run_alias" TEXT,
    "run_date" date,
    "platform" TEXT REFERENCES "platforms" ("code"),
    "capture_kit" TEXT,
    "is_paired_end" BOOLEAN,
    "read_length" INTEGER,
    "created_on" TIMESTAMP NOT NULL,
    "updated_on" TIMESTAMP NOT NULL
);

CREATE INDEX IF NOT EXISTS idx_sequencing_experiment_case_id ON "sequencing_experiment" ("case_id");
CREATE INDEX IF NOT EXISTS idx_sequencing_experiment_patient_id ON "sequencing_experiment" ("patient_id");
CREATE INDEX IF NOT EXISTS idx_sequencing_experiment_sample_id ON "sequencing_experiment" ("sample_id");

-- Tasks and Documents -------------------------------------------------------------------------
CREATE TABLE IF NOT EXISTS "pipeline" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "description" TEXT,
    "genome_build" TEXT
);

CREATE TABLE IF NOT EXISTS "task" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "type" TEXT REFERENCES "task_types" ("code") NOT NULL,
    "pipeline_id" INTEGER REFERENCES "pipeline" ("id") NOT NULL,
    "created_on" TIMESTAMP NOT NULL
);
CREATE INDEX IF NOT EXISTS idx_task_type ON "task" ("type");

CREATE TABLE IF NOT EXISTS "task_has_sequencing_experiments" (
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "sequencing_experiment_id" INTEGER REFERENCES "sequencing_experiment" ("id") NOT NULL,
    PRIMARY KEY ("task_id", "sequencing_experiment_id")
);

CREATE TABLE IF NOT EXISTS "task_has_related_tasks" (
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "related_task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    PRIMARY KEY ("task_id", "related_task_id")
);


CREATE TABLE IF NOT EXISTS "document" (
    "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    "name" TEXT NOT NULL,
    "data_category" TEXT NOT NULL REFERENCES "data_categories"("code"),
    "data_type" TEXT REFERENCES "data_types"("code") NOT NULL,
    "format" TEXT REFERENCES "file_formats"("code") NOT NULL,
    "size" BIGINT NOT NULL,
    "url" TEXT NOT NULL,
    "hash" TEXT
);
CREATE INDEX IF NOT EXISTS idx_document_name ON "document" ("name");
CREATE INDEX IF NOT EXISTS idx_document_data_type ON "document" ("data_type");
CREATE INDEX IF NOT EXISTS idx_document_format ON "document" ("format");

CREATE TABLE IF NOT EXISTS "task_has_documents" (
    "task_id" INTEGER REFERENCES "task" ("id") NOT NULL,
    "document_id" INTEGER REFERENCES "document" ("id") NOT NULL,
    PRIMARY KEY ("task_id", "document_id")
);

CREATE TABLE IF NOT EXISTS "document_has_patients" (
    "document_id" INTEGER REFERENCES "document" ("id") NOT NULL,
    "patient_id" INTEGER REFERENCES "patient" ("id") NOT NULL,
    PRIMARY KEY ("document_id", "patient_id")
);
-- Value Sets initial values -------------------------------------

INSERT INTO "observation_categories" ("code", "name_en") VALUES
('social_history', 'Social History'),
('vital_sign', 'Vital Sign'),
('imaging', 'Imaging'),
('laboratory', 'Laboratory'),
('procedure', 'Procedure'),
('survey', 'Survey'),
('exam', 'Exam'),
('therapy', 'Therapy'),
('activity', 'Activity')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "observations" ("code", "name_en", "category")
VALUES
    ('phenotype', 'Clinical sign', 'exam'),
    ('condition', 'Condition', 'exam'),
    ('ethnicity', 'Ethnicity', 'social_history')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "onsets" ("code", "name_en")
VALUES
    ('unknown', 'Unknown'),
    ('antenatal', 'Antenatal'),
    ('congenital', 'Congenital'),
    ('neonatal', 'Neonatal (< 28 days)'),
    ('infantile', 'Infantile (>= 28 days and < 1 year)'),
    ('childhood', 'Childhood (>= 1 year and < 5 years)'),
    ('juvenile', 'Juvenile (>= 5 years and < 16 years)'),
    ('young_adult', 'Young Adult (>= 16 years and < 40 years)'),
    ('middle_age', 'Middle Age (>= 40 years and < 60 years)'),
    ('senior', 'Senior (>= 60 years)')
ON CONFLICT (code) DO NOTHING;


INSERT INTO data_types (code, name_en)
VALUES
    ('alignment', 'Aligned Reads'),
    ('snv', 'Germline SNV'),
    ('ssnv', 'Somatic SNV'),
    ('gcnv', 'Germline CNV'),
    ('scnv', 'Somatic CNV'),
    ('gsv', 'Germline SV'),
    ('ssv', 'Somatic SV'),
    ('somfu', 'Somatic Fusion Dragen VCF'),
    ('ssup', 'Sequencing Data Supplement'),
    ('igv', 'IGV Track'),
    ('cnvvis', 'CNV Visualization'),
    ('exp', 'Expression PNG'),
    ('covgene', 'Coverage by Gene Report'),
    ('qcrun', 'Sequencing Run QC Report'),
    ('exomiser', 'Exomiser Report')
ON CONFLICT (code) DO NOTHING;

INSERT INTO file_formats (code, name_en)
VALUES
    ('cram', 'CRAM File'),
    ('crai', 'CRAI Index File'),
    ('vcf', 'VCF File'),
    ('tbi', 'TBI Index File'),
    ('tgz', 'TGZ Archive File'),
    ('json', 'JSON File'),
    ('html', 'HTML File'),
    ('tsv', 'TSV File'),
    ('bw', 'BW File'),
    ('bed', 'BED File'),
    ('png', 'PNG File'),
    ('csv', 'CSV File'),
    ('pdf', 'PDF File'),
    ('txt', 'Text File')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "organization_categories" ("code", "name_en") VALUES
('diagnostic_laboratory', 'Diagnostic Laboratory'),
('healthcare_provider', 'Healthcare Provider'),
('research_institute', 'Research Institute'),
('sequencing_center', 'Sequencing Center')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "sexes" ("code", "name_en") VALUES
('male', 'Male'),
('female', 'Female'),
('unknown', 'Unknown')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "case_types" ("code", "name_en") VALUES
('heriditary_single', 'Hereditary Disease - Single Case'),
('heriditary_family', 'Hereditary Disease - Family Case'),
('tumor', 'Tumor Case')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "statuses" ("code", "name_en") VALUES
('unknown', 'Unknown'),
('draft', 'Draft'),
('active', 'Active'),
('revoke', 'Revoke'),
('completed', 'Completed'),
('on-hold', 'On-hold'),
('incomplete', 'Incomplete'),
('submitted', 'Submitted')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "priorities" ("code", "name_en") VALUES
('routine', 'Routine'),
('urgent', 'Urgent'),
('asap', 'Asap'),
('stat', 'Stat')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "experimental_strategies" ("code", "name_en") VALUES
('wgs', 'Whole Genome Sequencing'),
('wxs', 'Whole Exome Sequencing'),
('wts', 'Whole Transcriptome Sequencing')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "platforms" ("code", "name_en") VALUES
('illumina', 'Illumina'),
('pacbio', 'Pacbio'),
('nanopore', 'Nanopore')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "family_relationships" ("code", "name_en") VALUES
('mother', 'Mother'),
('father', 'Father'),
('brother', 'Brother'),
('sister', 'Sister')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "obs_interpretations" ("code", "name_en") VALUES
('positive', 'Positive'),
('negative', 'Negative')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "sample_categories" ("code", "name_en") VALUES
('specimen', 'Specimen'),
('sample', 'Sample')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "sample_types" ("code", "name_en") VALUES
('dna', 'Dna'),
('rna', 'Rna'),
('blood', 'Blood'),
('solid_tissue', 'Solid Tissue')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "histology_types" ("code", "name_en") VALUES
('tumoral', 'Tumoral'),
('normal', 'Normal')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "affected_statuses" ("code", "name_en") VALUES
('affected', 'Affected'),
('non_affected', 'Non Affected'),
('unknown', 'Unknown')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "data_categories" ("code", "name_en") VALUES
('clinical', 'Clinical'),
('genomic', 'Genomic')
ON CONFLICT (code) DO NOTHING;

INSERT INTO "task_types" ("code", "name_en")
VALUES
    ('neba', 'Normal Exome Bioinformatic Analysis'),
    ('trba', 'Transcriptome Bioinformatic Analysis'),
    ('teba', 'Tumoral Exome Bioinformatic Analysis'),
    ('tneba', 'Tumor-Normal Exomes Bioinformatic Analysis'),
    ('ngba', 'Normal Genome Bioinformatic Analysis')
ON CONFLICT (code) DO NOTHING;